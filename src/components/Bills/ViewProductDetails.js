import React from 'react'
import {useSelector} from 'react-redux'
import moment from 'moment'
import ReactTOPdf from "react-to-pdf";

import {Box,
        TableBody,
        Button,
        TableHead,
        TableRow,
        Typography,
        Table,
        TableCell } from '@material-ui/core'

const ViewProductDetails=({id,customers,products})=>{
      
    const bills = useSelector((state) => state.bills);
    const aBill = bills.find(bill => bill.id === id);

    const ref = React.createRef();

    const user=useSelector((state)=>{
        return state.user
    })

     const getNameOfCustomer=(customerId)=>{
        const result=customers.find((ele)=>{
            return ele.id === customerId
        })
        return result ? result : { name: 'N/A', mobile: 'N/A' };
     }

     //Product detail
     const getProductsDetails=(productId)=>{
        const result=products.find((ele)=>{
             return ele.id===productId
        })
        return result ? result : { name: 'N/A', price: 0 };
     }
     
     const getParsedDate=(date)=>{
          const result=moment.utc(date)
          const da=result._d.toString()
          const Index=da.indexOf('G')  
          const result1= da.slice(0,Index)  
          return result1
     }
     
    return(
        <>
        <Box component="span" m={1}>
           {
               aBill &&
                <div ref={ref} style={{padding: '20px'}}>
                    <Typography>Customer Name : {getNameOfCustomer(aBill.customer_id).name}</Typography>
                    <Typography>Date : { getParsedDate(aBill.date)}</Typography>
                    <Typography>Mobile : {getNameOfCustomer(aBill.customer_id).mobile}</Typography>
                    <hr/>
                    <Table>
                        <TableHead>
                            <TableRow>
                                <TableCell>Product name</TableCell>
                                <TableCell>Product Price</TableCell>
                                <TableCell>Quantity</TableCell>
                                <TableCell>SubTotal</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            { aBill.bill_line_items.map((ele)=>{
                                const productDetails = getProductsDetails(ele.product_id);
                                 return <TableRow key={ele.id}>
                                            <TableCell>{productDetails.name}</TableCell>
                                            <TableCell>{productDetails.price}</TableCell>
                                            <TableCell>{ele.quantity}</TableCell>
                                            <TableCell>{productDetails.price * ele.quantity}</TableCell>
                                       </TableRow>   
                             })}
                        </TableBody>
                    </Table>
                    <hr/> 
                    <h2>Total-{aBill.bill_line_items.reduce((acc, cv) => acc + (getProductsDetails(cv.product_id).price * cv.quantity), 0)}</h2>
                    <br/>
                    <h3>Generated By-{user !==undefined && user.username}</h3>
                     <h4>created Date-{getParsedDate(aBill.created_at)}</h4>        
                </div>
           }
        </Box>
           <div>
           <ReactTOPdf targetRef={ref} >
                {({ toPdf }) => 
                    <Button onClick={toPdf} variant="contained"   color="primary">
                       Download
                   </Button>
                 }
         </ReactTOPdf>
               
            </div> 
        
        </>
    )
}
export default ViewProductDetails